@map = Micello: class Micello

  @loadTriggered: false

  constructor: (@options = {}) ->
    @initialized = false
    @deferred = @options.deferred = $.Deferred()

  mapContainer: ->
    $('#map-micello-api')

  noSupportClass: 'map-micello-oldie'

  micelloSupported: ->
    !@mapContainer().hasClass(@noSupportClass)

  load: ->
    return @initializeMap() if Micello.loadTriggered
    Micello.loadTriggered = true
    if @micelloSupported()
      $script(['//anzmaps.micello.com/webmap/v0/micellomap.js', '<%= asset_url 'map/micello.js' %>'], @initializeMap)
    else
      $script('<%= asset_url 'map/micello_ie.js' %>', @initializeMap)
    @

  initializeMap: =>
    unless @initialized
      @initialized = true
      @map = new map.micello.Map(@options)
    @

proxiedFunctions = [
  'setTarget'
  'showLevel'
  'zoom'
  'detail'
  'highlight'
  'centre'
  'centreOffset'
  'reset'
  'toggleKeyEvents'
]

do (proto = map.Micello.prototype, toProxy = proxiedFunctions) ->
  for name in toProxy
    proto[name] = do (name) -> (args...) ->
      func = -> @[name].apply(@, args)
      if @map then func.apply(@map) else @deferred.then(func)
      @
