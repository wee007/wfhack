window.map = Micello: class Micello

  @loadTriggered: false

  constructor: (@options = {}) ->
    @initialized = false
    @deferred = @options.deferred = $.Deferred()

  micelloSupported: ->
    !$('#map-micello-api').hasClass('map-micello-oldie')

  load: ->
    return @initializeMap() if Micello.loadTriggered
    Micello.loadTriggered = true
    Modernizr.load({
      test: @micelloSupported()
      yep: '<%= asset_url 'map/micello.js' %>'
      nope: '<%= asset_url 'map/micello_ie.js' %>'
      callback: @initializeMap
    })
    @

  initializeMap: =>
    return @ if @initialized
    if window.map?.micello?
      @initialized = true
      @map = new map.micello.Map(@options)
    else
      setTimeout(@initializeMap)
    @

  mapReady: ->
    @deferred.state() == 'resolved'

do (proto = map.Micello.prototype, toProxy = ['setTarget', 'showLevel', 'zoom', 'detail', 'highlight', 'centre', 'centreOffset', 'reset']) ->
  for name in toProxy
    proto[name] = do (name) -> (args...) ->
      func = => @map[name].apply(@map, args)
      if @deferred.state() == 'resolved'
        func()
      else
        @deferred.then(func)
      @
