/* ======================================================================================
   @LAYOUT -> GRID
   ====================================================================================== */

/*
	Usage:
		Fluid and nestable grid system.

	Note:
		-	Grid is built 'mobile first'.
		-	Grid does not work in IE 7 as it does not support: `box-sizing: border-box;`, if you need to support IE 7 then use `margin` instead of `padding` for the grid gutters and use `:first-child` to remove the `margin` from the first grid cell child instead of the negative left margin on `.grid`.

	Demo:
		Style Guide -> Grid

	Credit:
		https://github.com/csswizardry/csswizardry-grids/blob/master/csswizardry-grids.scss
*/

/* Grid container */
.grid {
	/* Negative `margin-left` to negate the columns' gutters */
	@include to-rem(margin-left, -$grid-gutter);

	/* Clear fix */
	@include clear-fix;

	/* Very infrequently occuring grid rows as children of grid rows */
	> .grid {margin-left: 0;}
}

	/* Grid item */
	.grid__item {
		width: 100%;
		float: left;
		@include to-rem(padding-left, $grid-gutter);

		/* Print - have to re-linearise as all browsers except Chrome will honor any width classes above the `$non-palm` breakpoint */
		@media print {
			width: 100% !important;
		}
	}

	/* Apply bottom margins between the grid elements for linearised version */
	.grid,
	.grid__item {
		@extend %mrg-base;

		/* Turn off bottom margin at this breakpoint (non-linearised) and only for 'screen' media so as not to affect 'print' media */
		@include respond-min($non-palm, $screen-only: true) {
			margin-bottom: 0;
		}
	}

/* --Extenders-- */

/* 'Gutterless' and 'Center align' */
.grid--gutterless,
.grid--center {margin-left: 0;}

/* Gutterless */
.grid--gutterless > .grid__item {padding-left: 0;}

/* Remove bottom margin */
.grid--flush {
	&,
	> .grid__item {margin-bottom: 0;}
}

/* Double the bottom margin at non-palm */
.grid--mrg-dbl-non-palm {
	.grid__item {
		@include respond-min($non-palm) {
			@include to-rem(margin-bottom, $spacing-dbl);
		}
	}
}

/* Double the gutter */
.grid--gutter-dbl {
	/* Negative `margin-left` to negate the columns' gutters */
	@include to-rem(margin-left, -$grid-gutter-dbl);

	/* Grid item */
	.grid__item {
		@include to-rem(padding-left, $grid-gutter-dbl);
	}
}

/* Center align */
.grid--center > .grid__item {
	margin-left: auto;
	margin-right: auto;
	padding-left: 0;
	float: none;
}

/* Reversed */
.grid--rev > .grid__item {float: right;}

/* Change stacking order for palm - only works for 2 cols */
@include respond-max($palm) {
	.grid--rev-stack {
		display: table;
		width: 100%;

		> .grid__item {
			float: none;
			width: 100%;
			display: table-footer-group;
		}

		> .grid__item + .grid__item {display: table-caption;}
	}
}

/* Table */
.grid--table {
	display: table;

	> .grid__item {
		display: table-cell;
		float: none;
	}
}

/* Lists */
.grid--list {
	/* This is for applying bottom spacing which you may or may not need? */
	@include to-rem(margin-bottom, -$grid-gutter);

	/* This is for applying bottom spacing between the `li`s which you may or may not need? */
	.grid__item {@include to-rem(margin-bottom, $grid-gutter);}

	/* If all the `li`s aren't the same height when the grid is used on lists then we have to clear the 1st `li` in the row by using this class, not the most attractive way to handle it but it will have to do for now */
	.grid__item--clear {clear: left;}
}