<h1 class="hide-visually">Products</h1>

<nav id="facets">
  <%- %w(super_cat category sub_category type).each do |category| -%>
    <%= render partial: 'products/facets/list', locals: {facet: @search.facets.send(category), title: 'Category'} if @search.facets.send(category) %>
  <%- end -%>
  <%= render partial: 'products/facets/filtered_list', locals: {facet: @search.facets.retailer} if @search.facets.retailer %>
  <%= render partial: 'products/facets/filtered_list', locals: {facet: @search.facets.brand} if @search.facets.brand %>
  <%= render partial: 'products/facets/list', locals: {facet: @search.facets.colour, title: "Colours"} if @search.facets.colour %>
  <%= render partial: 'products/facets/price', locals: {facet: @search.facets.price} if @search.facets.price %>
  <%= render partial: 'products/facets/summary', locals: {applied_filters: @search.applied_filters} if @search.applied_filters %>

  <span class='sort_options'>
    Sort by: <%= products_sort_tag @search.sort_options %>
  </span>
</nav>

<div id="pin-board" class="pin-board">
  <%- @search.products.each_slice(4) do |group| -%>
    <%- group.each do |product| -%>
      <div class="tile products isotope-item" data-url="">
        <%= link_to centre_product_path centre_id: params[:centre_id], retailer_code: product.retailer_code, sku: product.sku do %>
          <%= image_tag product.default_image_url %>
          <div class="title">
            <p class="name">
              <%=  product.lozenge_name %><br>
              <small>
                <span>from</span> <%= product.retail_chain_name %>
                <%= price_tag(product) %>
              </small>
            </p>
          </div>
        <%- end -%>
      </div>
    <%- end -%>
  <%- end -%>
  </div>
<%= paginate @search %>

<%- content_for :javascript do -%>
  <script type='text/javascript'>
    (function($) {
      $.expr[':'].startsWith = $.expr.createPseudo(function(str) {
        return function(elem) {
          return jQuery(elem).text().replace(/[^a-zA-Z0-9]/g,'').toUpperCase().indexOf(str.replace(/[^a-zA-Z0-9]/g,'').toUpperCase()) == 0;
        };
      });
      var decode = function(str) {
        return decodeURIComponent(str.replace(/\+/g, ' '));
      };
      $.parseParams = function(query) {
        var re = /([^&=]+)=?([^&]*)/g;
        var params = {}, e;
        if (query) {
          if (query.substr(0, 1) == '?') {
            query = query.substr(1);
          }

          while (e = re.exec(query)) {
            var k = decode(e[1]);
            var v = decode(e[2]);
            if (params[k] !== undefined) {
              if (!$.isArray(params[k])) {
                params[k] = [params[k]];
              }
              params[k].push(v);
            } else {
              params[k] = v;
            }
          }
        }
        return params;
      };
      function changeParams(params) {
        var queryParameters = $.parseParams(window.location.search);
        location.search = $.param($.extend(true, {}, queryParameters, params),false).replace(/%2B/g,"+");
      }
      $('.facet li[data-facet-link], #applied_filters-list span[data-facet-link]').click(function(event) {
        window.location = $(event.target).attr('data-facet-link');
      });
      $('#sort').change(function(event) {
        window.location = $("#sort option[value='"+$('#sort').val()+"']").attr('data-sort-link')
      });
      $("#price-facet-slider").slider({
        range: true, min: 0, max: <%= @search.facets.price[:max] %>,
        values: [<%= params[:price] ? params[:price].split("-").join(", ") : [0, @search.facets.price[:max]].join(", ") %>],
        slide: function(event, ui) {
          $('.facet-price .price-low').text(ui.values[0]+'.00');
          $('.facet-price .price-high').text(ui.values[1]+'.00');
        },
        change: function(event, ui) {
          changeParams({price: ui.values[0] + '-' + ui.values[1]});
        }
      });
      $("input.facet-filter").keyup(function(event) {
        var field = $(event.target);
        if (field.val() == '')
          field.siblings("div").find('li').show();
        else {
          field.siblings("div").find("li:startsWith(" + field.val() + ")").show();
          field.siblings("div").find("li:not(:startsWith(" + field.val() + "))").hide();
        }
        field.parent().tinyscrollbar_update();
      });
      $(".facet-filtered").tinyscrollbar();
    })(jQuery);
  </script>
<%- end -%>
